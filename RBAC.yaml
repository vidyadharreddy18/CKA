Description: >
  In k8s if we want to limit users from having admin access using role and rolebindings
  Using roles we define which resources of k8s cluster can a user access, and then we 
  them to the user using the role binding. lets see this with an example. Assuming that
  we have a new user who wanted to access the cluster and just create only pods. then 
  how to achieve this? 
  Note: 1. Roles and Role bindings fall under the namespaces, default would be the default
  namespace, in case if we want to access resources from another name space we can specify it
  in the role yaml file by specifying namespace: within the metadata. 2. In case if we want to
  give access to only some pods within a name space then we can specify it in the role yaml file
  under rules as resourceNames: ["pod-name","pod-name"]
  Commands: 
  kubectl get roles -n <namespace>, kubectl describe role <role-name>
  kubectl get rolebindings -n <ns>, kubectl describe rolebindings <nmae>
  kubectl get pods --as <user> #to know if the user has access to resources.
  ---
  
#role creation
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
name: developer
namespace: default
rules:
- apiGroups: [""]                         #empty for core groups
  resources: ["pods"]
  verbs: ["list", "create"]
  
  
---
#now we need to bind the above role to the user using rolebindings
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata: 
  name: dev-user-binding
subjects:                  #here we mention the user details
- kind: User
  name: dev-user
  apiGroup: rbac.authorization.k8s.io
roleRef:                  #here we mention the role details.
  kind: Role
  name: developer
  apiGroup: rbac.authorization.k8s.io
